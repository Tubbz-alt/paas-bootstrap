---
resources:
  - name: paas-bootstrap
    type: git-gpg
    source:
      uri: https://github.com/alphagov/paas-bootstrap.git
      branch: {{branch_name}}

  - name: bucket-terraform-state
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bucket.tfstate

  - name: pipeline-trigger
    type: semver-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      key: pipeline-trigger

  - name: vpc-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: vpc.tfstate
      region_name: {{aws_region}}

  - name: bosh-CA
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-CA.tar.gz

  - name: bosh-secrets
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-secrets.yml

  - name: bosh-ssh-private-key
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: bosh_id_rsa
      region_name: {{aws_region}}

  - name: bosh-ssh-public-key
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: bosh_id_rsa.pub
      region_name: {{aws_region}}

  - name: ssh-private-key
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: id_rsa
      region_name: {{aws_region}}

  - name: ssh-public-key
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: id_rsa.pub
      region_name: {{aws_region}}

  - name: bosh-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh.tfstate

  - name: bosh-manifest
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: bosh-manifest.yml

  - name: bosh-init-state
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: {{bosh_manifest_state}}

  - name: concourse-tfstate
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: concourse.tfstate
      region_name: {{aws_region}}

  - name: git-ssh-public-key
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: git_id_rsa.pub
      region_name: {{aws_region}}

  - name: concourse-cert
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      versioned_file: concourse-cert.tar.gz
      region_name: {{aws_region}}

  - name: concourse-secrets
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: concourse-secrets.yml

  - name: concourse-manifest
    type: s3-iam
    source:
      bucket: {{state_bucket}}
      region_name: {{aws_region}}
      versioned_file: concourse-manifest.yml

jobs:
  - name: init-bucket
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap
      - task: try-fetch-bucket-state
        config:
          image: docker:///governmentpaas/awscli
          params:
            AWS_DEFAULT_REGION: {{aws_region}}
          inputs:
            - name: paas-bootstrap
          outputs:
            - name: bucket-state
          run:
            path: sh
            args:
            - -c
            - -e
            - |
              cd bucket-state
              aws s3 cp s3://{{state_bucket}}/bucket.tfstate . || true
              ls -l

      - task: create-init-bucket
        config:
          image: docker:///governmentpaas/terraform
          params:
            TF_VAR_env: {{deploy_env}}
            TF_VAR_state_bucket: {{state_bucket}}
            AWS_DEFAULT_REGION: {{aws_region}}
          inputs:
            - name: paas-bootstrap
            - name: bucket-state
          run:
            path: sh
            args:
            - -c
            - |
              if [ -f bucket-state/bucket.tfstate ]; then
                cp bucket-state/bucket.tfstate .
              fi
              terraform apply -state=bucket.tfstate -var-file=paas-bootstrap/terraform/{{aws_account}}.tfvars \
                paas-bootstrap/terraform/bucket
        on_success:
          put: bucket-terraform-state
          params:
            file: create-init-bucket/bucket.tfstate

      - task: s3init-concourse
        config:
          image: docker:///governmentpaas/curl-ssl
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} bosh.tfstate paas-bootstrap/concourse/init_files/terraform.tfstate.tpl
              paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} {{bosh_manifest_state}} paas-bootstrap/concourse/init_files/bosh-init-state.json.tpl
              paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} vpc.tfstate paas-bootstrap/concourse/init_files/terraform.tfstate.tpl
              paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} bosh-CA.tar.gz paas-bootstrap/concourse/init_files/empty.tar.gz
              paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} bosh-secrets.yml paas-bootstrap/concourse/init_files/zero_bytes
              paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} bosh_id_rsa paas-bootstrap/concourse/init_files/zero_bytes
              paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} bosh_id_rsa.pub paas-bootstrap/concourse/init_files/zero_bytes
              paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} id_rsa paas-bootstrap/concourse/init_files/zero_bytes
              paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} id_rsa.pub paas-bootstrap/concourse/init_files/zero_bytes
              paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} concourse.tfstate paas-bootstrap/concourse/init_files/terraform.tfstate.tpl
              paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} concourse-cert.tar.gz paas-bootstrap/concourse/init_files/empty.tar.gz
              paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} concourse-secrets.yml paas-bootstrap/concourse/init_files/zero_bytes

          inputs:
          - name: paas-bootstrap
      - put: pipeline-trigger
        params: {bump: patch}

  - name: vpc
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap
          trigger: true
          passed: ['init-bucket']
        - get: pipeline-trigger
          trigger: true
          passed: ['init-bucket']
        - get: vpc-tfstate

      - task: generate-git-ssh-key
        config:
          image: docker:///governmentpaas/curl-ssl
          inputs:
          - name: paas-bootstrap
          params:
            AWS_DEFAULT_REGION: {{aws_region}}
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              apk add --update openssh
              ssh-keygen -t rsa -b 4096 -f generated_git_id_rsa -N ''
              ./paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} git_id_rsa generated_git_id_rsa
              ./paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} git_id_rsa.pub generated_git_id_rsa.pub

      - task: deploy-vpc
        config:
          platform: linux
          image: docker:///governmentpaas/terraform
          inputs:
          - name: paas-bootstrap
          - name: vpc-tfstate
          params:
            VAGRANT_IP: {{vagrant_ip}}
            TF_VAR_env: {{deploy_env}}
            AWS_DEFAULT_REGION: {{aws_region}}
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              terraform_params=${VAGRANT_IP:+-var vagrant_cidr=$VAGRANT_IP/32}
              terraform apply ${terraform_params} -var-file=paas-bootstrap/terraform/{{aws_account}}.tfvars \
                -state=vpc-tfstate/vpc.tfstate -state-out=vpc.tfstate paas-bootstrap/terraform/vpc
        ensure:
          put: vpc-tfstate
          params:
            file: deploy-vpc/vpc.tfstate

  - name: generate-secrets
    plan:
      - aggregate:
        - get: paas-bootstrap
          passed: ['init-bucket']
        - get: pipeline-trigger
          passed: ['init-bucket']
          trigger: true
        - get: bosh-CA
        - get: bosh-secrets
        - get: bosh-ssh-private-key
        - get: bosh-ssh-public-key
        - get: ssh-private-key
        - get: ssh-public-key
        - get: concourse-secrets

      - task: generate-bosh-CA
        config:
          platform: linux
          image: docker:///governmentpaas/certstrap
          inputs:
            - name: paas-bootstrap
            - name: bosh-CA
              path: existing-bosh-CA
          outputs:
            - name: generated-bosh-CA
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                if  [ -z "$(tar -tvzf existing-bosh-CA/bosh-CA.tar.gz)" ] ; then
                  certstrap init --passphrase "" --common-name bosh-CA
                  ( cd out && tar -cvzf ../generated-bosh-CA/bosh-CA.tar.gz bosh-CA.* )
                else
                  echo "The CA cert already exists, skipping generation..."
                  cp existing-bosh-CA/bosh-CA.tar.gz generated-bosh-CA/bosh-CA.tar.gz
                  mkdir out
                  tar -xvzf generated-bosh-CA/bosh-CA.tar.gz -C out
                fi
                ./paas-bootstrap/concourse/scripts/file_to_yaml.sh secrets bosh_ca_cert out/bosh-CA.crt > generated-bosh-CA/bosh-ca-cert.yml
        on_success:
          put: bosh-CA
          params:
            file: generated-bosh-CA/bosh-CA.tar.gz

      - aggregate:
        - task: generate-bosh-secrets
          config:
            platform: linux
            image: docker:///ruby#2.2-slim
            inputs:
              - name: paas-bootstrap
              - name: bosh-secrets
                path: existing-bosh-secrets
            outputs:
              - name: generated-bosh-secrets
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  ./paas-bootstrap/manifests/bosh-manifest/scripts/generate-bosh-secrets.rb \
                    --existing-secrets existing-bosh-secrets/bosh-secrets.yml \
                    > generated-bosh-secrets/bosh-secrets.yml
                  ls -l generated-bosh-secrets
          on_success:
            put: bosh-secrets
            params:
              file: generated-bosh-secrets/bosh-secrets.yml

        - task: generate-bosh-ssh-keypair
          config:
            platform: linux
            image: docker:///governmentpaas/git-ssh
            inputs:
              - name: paas-bootstrap
              - name: bosh-ssh-private-key
              - name: bosh-ssh-public-key
            outputs:
              - name: bosh-ssh-private-key-to-upload
              - name: bosh-ssh-public-key-to-upload
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  if [ -s bosh-ssh-private-key/bosh_id_rsa ] ; then
                    echo "BOSH private key non-zero size, skipping generation..."
                    cp bosh-ssh-private-key/bosh_id_rsa bosh-ssh-private-key-to-upload
                    cp bosh-ssh-public-key/bosh_id_rsa.pub bosh-ssh-public-key-to-upload
                    exit 0
                  fi

                  echo "Generating new ssh key pair for BOSH..."
                  ssh-keygen -t rsa -b 4096 -f bosh_id_rsa -N ''
                  cp bosh_id_rsa bosh-ssh-private-key-to-upload
                  cp bosh_id_rsa.pub bosh-ssh-public-key-to-upload
          on_success:
            try:
              aggregate:
                - put: bosh-ssh-private-key
                  params:
                    file: bosh-ssh-private-key-to-upload/bosh_id_rsa
                - put: bosh-ssh-public-key
                  params:
                    file: bosh-ssh-public-key-to-upload/bosh_id_rsa.pub

        - task: generate-deployments-ssh-keypair
          config:
            platform: linux
            image: docker:///governmentpaas/git-ssh
            inputs:
              - name: paas-bootstrap
              - name: ssh-private-key
              - name: ssh-public-key
            outputs:
              - name: ssh-private-key-to-upload
              - name: ssh-public-key-to-upload
            run:
              path: sh
              args:
                - -e
                - -c
                - |
                  if [ -s ssh-private-key/id_rsa ] ; then
                    echo "Deployments private key non-zero size, skipping generation..."
                    cp ssh-private-key/id_rsa ssh-private-key-to-upload
                    cp ssh-public-key/id_rsa.pub ssh-public-key-to-upload
                    exit 0
                  fi

                  echo "Generating new ssh key pair for deployments..."
                  ssh-keygen -t rsa -b 4096 -f id_rsa -N ''
                  cp id_rsa ssh-private-key-to-upload
                  cp id_rsa.pub ssh-public-key-to-upload
          on_success:
            try:
              aggregate:
                - put: ssh-private-key
                  params:
                    file: ssh-private-key-to-upload/id_rsa
                - put: ssh-public-key
                  params:
                    file: ssh-public-key-to-upload/id_rsa.pub

      - task: generate-concourse-secrets
        config:
          image: docker:///ruby#2.2-slim
          params:
            concourse_atc_password: {{concourse_atc_password}}
          inputs:
          - name: paas-bootstrap
          - name: concourse-secrets
          outputs:
            - name: generated-concourse-secrets
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ./paas-bootstrap/manifests/concourse-manifest/scripts/generate-concourse-secrets.rb \
                --existing-secrets concourse-secrets/concourse-secrets.yml \
                > generated-concourse-secrets/concourse-secrets.yml
              echo "  concourse_atc_password: ${concourse_atc_password}" >> generated-concourse-secrets/concourse-secrets.yml
              ls -l generated-concourse-secrets/concourse-secrets.yml
        on_success:
          put: concourse-secrets
          params:
            file: generated-concourse-secrets/concourse-secrets.yml

  - name: bosh-terraform
    plan:
      - aggregate:
        - get: pipeline-trigger
          trigger: true
          passed: ['generate-secrets', 'vpc']
        - get: paas-bootstrap
          passed: ['generate-secrets']
        - get: bosh-secrets
          passed: ['generate-secrets']
        - get: vpc-tfstate
          passed: ['vpc']
        - get: bosh-tfstate
        - get: bosh-ssh-public-key
          passed: ['generate-secrets']
        - get: ssh-public-key
          passed: ['generate-secrets']

      - task: extract-terraform-variables
        config:
          platform: linux
          image: docker:///ruby#2.2-slim
          inputs:
            - name: paas-bootstrap
            - name: vpc-tfstate
            - name: bosh-secrets
          outputs:
            - name: terraform-variables
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
                < vpc-tfstate/vpc.tfstate > terraform-variables/vpc.tfvars.sh
                ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_yaml.rb \
                < bosh-secrets/bosh-secrets.yml > terraform-variables/bosh-secrets.tfvars.sh

      - task: terraform-apply
        config:
          platform: linux
          image: docker:///governmentpaas/terraform
          inputs:
            - name: paas-bootstrap
            - name: terraform-variables
            - name: bosh-tfstate
            - name: bosh-ssh-public-key
            - name: ssh-public-key
          outputs:
            - name: updated-bosh-tfstate
          params:
            DEPLOY_ENV: {{deploy_env}}
            AWS_DEFAULT_REGION: {{aws_region}}
            VAGRANT_IP: {{vagrant_ip}}
            TF_VAR_system_dns_zone_name: {{system_dns_zone_name}}
            TF_VAR_bosh_az: {{bosh_az}}
            TF_VAR_bosh_fqdn: {{bosh_fqdn}}
            TF_VAR_bosh_fqdn_external: {{bosh_fqdn_external}}
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                . terraform-variables/vpc.tfvars.sh
                . terraform-variables/bosh-secrets.tfvars.sh

                cp ssh-public-key/id_rsa.pub paas-bootstrap/terraform/bosh
                cp bosh-ssh-public-key/bosh_id_rsa.pub paas-bootstrap/terraform/bosh
                terraform_params=${VAGRANT_IP:+-var vagrant_cidr=$VAGRANT_IP/32}
                terraform apply ${terraform_params} -var env={{deploy_env}} -var-file=paas-bootstrap/terraform/{{aws_account}}.tfvars \
                  -state=bosh-tfstate/bosh.tfstate -state-out=updated-bosh-tfstate/bosh.tfstate paas-bootstrap/terraform/bosh
        ensure:
          put: bosh-tfstate
          params:
            file: updated-bosh-tfstate/bosh.tfstate

  - name: generate-bosh-config
    serial_groups: [bosh-deploy]
    serial: true
    plan:
      - aggregate:
        - get: pipeline-trigger
          trigger: true
          passed: ['bosh-terraform']
        - get: paas-bootstrap
          passed: ['bosh-terraform']
        - get: bosh-secrets
          passed: ['bosh-terraform']
        - get: bosh-CA
        - get: vpc-tfstate
          passed: ['bosh-terraform']
        - get: bosh-tfstate
          passed: ['bosh-terraform']

      - task: extract_terraform_outputs
        config:
          platform: linux
          image: docker:///ruby#2.2-slim
          inputs:
            - name: paas-bootstrap
            - name: vpc-tfstate
            - name: bosh-tfstate
          outputs:
            - name: terraform-outputs
          run:
            path: sh
            args:
              - -c
              - -e
              - |
                ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
                  < vpc-tfstate/vpc.tfstate \
                  > terraform-outputs/vpc.terraform-outputs.yml
                ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
                  < bosh-tfstate/bosh.tfstate \
                  > terraform-outputs/bosh.terraform-outputs.yml

      - task: extract-bosh-CA
        config:
          platform: linux
          image: docker:///governmentpaas/certstrap
          inputs:
            - name: paas-bootstrap
            - name: bosh-CA
          outputs:
            - name: bosh-CA-yml
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                echo "The CA cert already exists, skipping generation..."
                mkdir out
                tar -xvzf bosh-CA/bosh-CA.tar.gz -C out
                ./paas-bootstrap/concourse/scripts/file_to_yaml.sh secrets bosh_ca_cert out/bosh-CA.crt > bosh-CA-yml/bosh-ca-cert.yml

      - task: render-bosh-manifest
        config:
          platform: linux
          image: docker:///governmentpaas/spruce
          inputs:
            - name: paas-bootstrap
            - name: terraform-outputs
            - name: bosh-secrets
            - name: bosh-CA-yml
          outputs:
            - name: bosh-manifest
          params:
            AWS_ACCOUNT: {{aws_account}}
            DATADOG_API_KEY: {{datadog_api_key}}
            DATADOG_APP_KEY: {{datadog_app_key}}
            ENABLE_DATADOG: {{enable_datadog}}
            BOSH_MANIFEST_STUBS: |
              ./paas-bootstrap/manifests/bosh-manifest/bosh-manifest.yml
              ./bosh-secrets/bosh-secrets.yml
              ./bosh-CA-yml/bosh-ca-cert.yml
              ./terraform-outputs/bosh.terraform-outputs.yml
              ./terraform-outputs/vpc.terraform-outputs.yml
            BOSH_FQDN: {{bosh_fqdn}}
            BOSH_FQDN_EXTERNAL: {{bosh_fqdn_external}}
            BOSH_INSTANCE_PROFILE: {{bosh_instance_profile}}
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                if [ "${ENABLE_DATADOG}" = "true" ] ; then
                   BOSH_MANIFEST_STUBS="${BOSH_MANIFEST_STUBS}
                                        ./paas-bootstrap/manifests/bosh-manifest/extensions/datadog-agent.yml
                                        ./paas-bootstrap/manifests/shared/deployments/datadog-agent.yml"
                fi
                ./paas-bootstrap/manifests/shared/build_manifest.sh $BOSH_MANIFEST_STUBS > bosh-manifest/bosh-manifest.yml
        on_success:
          put: bosh-manifest
          params:
            file: bosh-manifest/bosh-manifest.yml

  - name: bosh-deploy
    plan:
      - aggregate:
        - get: pipeline-trigger
          passed: ['generate-bosh-config']
          trigger: true
        - get: bosh-manifest
          passed: ['generate-bosh-config']
        - get: bosh-init-state
        - get: bosh-ssh-private-key

      - task: bosh-init-microbosh
        config:
          platform: linux
          image: docker:///governmentpaas/bosh-init
          inputs:
            - name: bosh-manifest
            - name: bosh-init-state
            - name: bosh-ssh-private-key
          outputs:
            - name: bosh-init-working-dir
          params:
            BOSH_MANIFEST_STATE: {{bosh_manifest_state}}
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                mkdir -p bosh-init-working-dir/.ssh
                cp bosh-ssh-private-key/bosh_id_rsa bosh-init-working-dir/.ssh/bosh_id_rsa
                chmod 400 bosh-init-working-dir/.ssh/bosh_id_rsa
                cp bosh-manifest/bosh-manifest.yml bosh-init-working-dir/bosh-manifest.yml
                cp bosh-init-state/"${BOSH_MANIFEST_STATE}" bosh-init-working-dir/bosh-manifest-state.json
                bosh-init deploy bosh-init-working-dir/bosh-manifest.yml
        ensure:
          put: bosh-init-state
          params:
            file: "bosh-init-working-dir/bosh-manifest-state.json"

  - name: concourse-terraform
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap
          passed: ['bosh-terraform']
        - get: pipeline-trigger
          trigger: true
          passed: ['bosh-terraform']
        - get: vpc-tfstate
          passed: ['bosh-terraform']
        - get: bosh-tfstate
          passed: ['bosh-terraform']
        - get: concourse-tfstate
        - get: concourse-cert
        - get: git-ssh-public-key

      - task: terraform-outputs-to-sh
        config:
          image: docker:///ruby#2.2-slim
          inputs:
          - name: paas-bootstrap
          - name: vpc-tfstate
          - name: bosh-tfstate
          outputs:
          - name: vpc-terraform-outputs
          - name: bosh-terraform-outputs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < vpc-tfstate/vpc.tfstate \
              > vpc-terraform-outputs/tfvars.sh
              ls -l vpc-terraform-outputs/tfvars.sh
              ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < bosh-tfstate/bosh.tfstate \
              > bosh-terraform-outputs/tfvars.sh
              ls -l bosh-terraform-outputs/tfvars.sh

      - task: generate-concourse-cert
        config:
          image: docker:///governmentpaas/curl-ssl
          inputs:
          - name: concourse-cert
          outputs:
          - name: generated-concourse-cert
          params:
            CONCOURSE_HOSTNAME: {{concourse_hostname}}
            SYSTEM_DNS_ZONE_NAME: {{system_dns_zone_name}}
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              tar xzvf concourse-cert/concourse-cert.tar.gz
              if [ -f concourse.crt ] && [ -f concourse.key ]; then
                echo "Certificate and private key already created, nothing to do"
                cp concourse-cert/concourse-cert.tar.gz generated-concourse-cert/
                exit 0
              fi
              openssl req -x509 -newkey rsa:2048 -keyout concourse.key \
                -out concourse.crt -days 365 -nodes -subj \
                "/C=UK/ST=London/L=London/O=GDS/CN=${CONCOURSE_HOSTNAME}.${SYSTEM_DNS_ZONE_NAME}"
              tar czvf generated-concourse-cert/concourse-cert.tar.gz concourse.crt concourse.key
        on_success:
          put: concourse-cert
          params:
            file: generated-concourse-cert/concourse-cert.tar.gz

      - task: generate-concourse-ssh-key
        config:
          image: docker:///governmentpaas/curl-ssl
          inputs:
          - name: paas-bootstrap
          outputs:
          - name: concourse-ssh-key
          params:
            AWS_DEFAULT_REGION: {{aws_region}}
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              apk add --update openssh
              cd concourse-ssh-key
              ssh-keygen -t rsa -b 4096 -f generated_concourse_id_rsa -N ''
              ../paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} concourse_id_rsa generated_concourse_id_rsa
              ../paas-bootstrap/concourse/scripts/s3init.sh {{state_bucket}} concourse_id_rsa.pub generated_concourse_id_rsa.pub

      - task: terraform-apply
        config:
          image: docker:///governmentpaas/terraform
          inputs:
          - name: paas-bootstrap
          - name: vpc-terraform-outputs
          - name: bosh-terraform-outputs
          - name: concourse-tfstate
          - name: generated-concourse-cert
          - name: git-ssh-public-key
          - name: concourse-ssh-key
          params:
            VAGRANT_IP: {{vagrant_ip}}
            TF_VAR_env: {{deploy_env}}
            TF_VAR_concourse_hostname: {{concourse_hostname}}
            TF_VAR_system_dns_zone_name: {{system_dns_zone_name}}
            AWS_DEFAULT_REGION: {{aws_region}}
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              cp concourse-ssh-key/concourse_id_rsa.pub paas-bootstrap/terraform/concourse
              tar xzvf generated-concourse-cert/concourse-cert.tar.gz
              . vpc-terraform-outputs/tfvars.sh
              . bosh-terraform-outputs/tfvars.sh
              export TF_VAR_git_rsa_id_pub
              TF_VAR_git_rsa_id_pub=$(cat git-ssh-public-key/git_id_rsa.pub)

              terraform_params=${VAGRANT_IP:+-var vagrant_cidr=$VAGRANT_IP/32}
              terraform apply ${terraform_params} \
                -var-file=paas-bootstrap/terraform/{{aws_account}}.tfvars \
                -state=concourse-tfstate/concourse.tfstate \
                -state-out=concourse.tfstate \
                paas-bootstrap/terraform/concourse
        ensure:
          put: concourse-tfstate
          params:
            file: terraform-apply/concourse.tfstate

      # Temporary task to add the git-${DEPLOY_ENV} user to git group
      - task: add-git-user-to-group
        config:
          image: docker:///governmentpaas/awscli
          inputs:
          - name: paas-bootstrap
          params:
            DEPLOY_ENV: {{deploy_env}}
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              aws iam add-user-to-group --user-name git-${DEPLOY_ENV} --group-name concourse-pool-git-rw

  - name: concourse-deploy
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap
          passed: ['concourse-terraform']
        - get: pipeline-trigger
          trigger: true
          passed: ['concourse-terraform', 'bosh-deploy']
        - get: vpc-tfstate
          passed: ['concourse-terraform']
        - get: concourse-tfstate
          passed: ['concourse-terraform']
        - get: concourse-secrets
        - get: bosh-tfstate
          passed: ['concourse-terraform']
        - get: bosh-secrets

      - task: terraform-outputs-to-yaml
        config:
          image: docker:///ruby#2.2-slim
          inputs:
          - name: paas-bootstrap
          - name: concourse-tfstate
          - name: vpc-tfstate
          - name: bosh-tfstate
          outputs:
          - name: terraform-outputs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
              < vpc-tfstate/vpc.tfstate \
              > terraform-outputs/vpc-terraform-outputs.yml
              ls -l terraform-outputs/vpc-terraform-outputs.yml

              ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
              < concourse-tfstate/concourse.tfstate \
              > terraform-outputs/concourse-terraform-outputs.yml
              ls -l terraform-outputs/concourse-terraform-outputs.yml

              ruby paas-bootstrap/concourse/scripts/extract_terraform_state_to_yaml.rb \
              < bosh-tfstate/bosh.tfstate \
              > terraform-outputs/bosh-terraform-outputs.yml
              ls -l terraform-outputs/bosh-terraform-outputs.yml

      - task: generate-concourse-manifest
        config:
          image: docker:///governmentpaas/spruce
          params:
            AWS_ACCOUNT: {{aws_account}}
            DATADOG_API_KEY: {{datadog_api_key}}
            DATADOG_APP_KEY: {{datadog_app_key}}
            ENABLE_DATADOG: {{enable_datadog}}
            CONCOURSE_AUTH_DURATION: {{concourse_auth_duration}}
            CONCOURSE_MANIFEST_STUBS: |
              ./paas-bootstrap/manifests/concourse-manifest/concourse-base.yml
              concourse-secrets/concourse-secrets.yml
              terraform-outputs/concourse-terraform-outputs.yml
              terraform-outputs/vpc-terraform-outputs.yml
              terraform-outputs/bosh-terraform-outputs.yml
            CONCOURSE_INSTANCE_TYPE: {{concourse_instance_type}}
            CONCOURSE_INSTANCE_PROFILE: {{concourse_instance_profile}}
          inputs:
          - name: paas-bootstrap
          - name: concourse-secrets
          - name: terraform-outputs
          outputs:
          - name: concourse-manifest
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              if [ "${ENABLE_DATADOG}" = "true" ] ; then
                 CONCOURSE_MANIFEST_STUBS="${CONCOURSE_MANIFEST_STUBS}
                                ./paas-bootstrap/manifests/concourse-manifest/extensions/datadog-agent.yml
                                ./paas-bootstrap/manifests/shared/deployments/datadog-agent.yml"
              fi
              ./paas-bootstrap/manifests/shared/build_manifest.sh $CONCOURSE_MANIFEST_STUBS \
                > concourse-manifest/concourse-manifest.yml
              ls -l concourse-manifest/concourse-manifest.yml
        on_success:
          put: concourse-manifest
          params:
            file: concourse-manifest/concourse-manifest.yml

      - task: get-and-upload-stemcell
        config:
          platform: linux
          image: docker:///governmentpaas/bosh-cli
          inputs:
            - name: bosh-secrets
            - name: paas-bootstrap
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                VAL_FROM_YAML=$(pwd)/paas-bootstrap/concourse/scripts/val_from_yaml.rb

                STEMCELL_VERSION=$($VAL_FROM_YAML meta.stemcell.version paas-bootstrap/manifests/concourse-manifest/concourse-base.yml)
                STEMCELL_NAME=$($VAL_FROM_YAML meta.stemcell.name paas-bootstrap/manifests/concourse-manifest/concourse-base.yml)

                wget https://bosh.io/d/stemcells/${STEMCELL_NAME}?v=${STEMCELL_VERSION} -O stemcell.tgz
                ./paas-bootstrap/concourse/scripts/bosh_login.sh {{bosh_fqdn_external}} bosh-secrets/bosh-secrets.yml
                bosh upload stemcell stemcell.tgz --skip-if-exists

      - task: deploy-concourse
        config:
          image: docker:///governmentpaas/bosh-cli
          inputs:
          - name: concourse-manifest
          - name: bosh-secrets
          - name: paas-bootstrap
          outputs:
          - name: updated-concourse-manifest
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ./paas-bootstrap/concourse/scripts/bosh_login.sh {{bosh_fqdn_external}} bosh-secrets/bosh-secrets.yml
              sed -e "s/^director_uuid:.*/director_uuid: $(bosh status --uuid)/" < concourse-manifest/concourse-manifest.yml > updated-concourse-manifest/concourse-manifest.yml
              bosh deployment updated-concourse-manifest/concourse-manifest.yml
              bosh -n deploy
        on_success:
          put: concourse-manifest
          params:
            file: updated-concourse-manifest/concourse-manifest.yml

      - task: add-env-specific-team
        config:
          image: docker:///governmentpaas/self-update-pipelines
          inputs:
            - name: paas-bootstrap
            - name: concourse-manifest
          params:
            CONCOURSE_HOSTNAME: {{concourse_hostname}}
            SYSTEM_DNS_ZONE_NAME: {{system_dns_zone_name}}
            CONCOURSE_ATC_PASSWORD: {{concourse_atc_password}}
            CONCOURSE_ATC_USER: admin
            FLY_TEAM: {{aws_account}}
            FLY_TARGET: {{deploy_env}}
            FLY_CMD: ./paas-bootstrap/bin/fly
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                export CONCOURSE_URL="https://${CONCOURSE_HOSTNAME}.${SYSTEM_DNS_ZONE_NAME}"
                ./paas-bootstrap/concourse/scripts/fly_sync_and_login.sh
                echo y | ${FLY_CMD} -t ${FLY_TARGET} set-team -n ${FLY_TEAM} \
                           --basic-auth-username admin --basic-auth-password ${CONCOURSE_ATC_PASSWORD}

      - task: test-bosh-vms
        config:
          platform: linux
          image: docker:///governmentpaas/bosh-cli
          inputs:
          - name: paas-bootstrap
          - name: updated-concourse-manifest
          - name: bosh-secrets
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ./paas-bootstrap/concourse/scripts/bosh_login.sh {{bosh_fqdn_external}} bosh-secrets/bosh-secrets.yml
              bosh deployment updated-concourse-manifest/concourse-manifest.yml
              bosh vms | tee vms.txt
              [ $(grep '|' vms.txt | grep -cEv "(^\|\ \ |\-\-|VM|running)") -eq 0 ]

  - name: expunge-vagrant
    serial: true
    plan:
      - aggregate:
        - get: paas-bootstrap
          passed: ['concourse-deploy']
        - get: pipeline-trigger
          trigger: true
          passed: ['concourse-deploy']
        - get: vpc-tfstate
        - get: bosh-tfstate
        - get: concourse-tfstate

      - task: terraform-outputs-to-sh
        config:
          image: docker:///ruby#2.2-slim
          inputs:
          - name: paas-bootstrap
          - name: vpc-tfstate
          - name: bosh-tfstate
          outputs:
          - name: vpc-terraform-outputs
          - name: bosh-terraform-outputs
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < vpc-tfstate/vpc.tfstate \
              > vpc-terraform-outputs/tfvars.sh
              ls -l vpc-terraform-outputs/tfvars.sh
              ruby paas-bootstrap/concourse/scripts/extract_tf_vars_from_terraform_state.rb \
              < bosh-tfstate/bosh.tfstate \
              > bosh-terraform-outputs/tfvars.sh
              ls -l bosh-terraform-outputs/tfvars.sh

      - task: remove-vagrant-IP-from-ssh-SG
        config:
          platform: linux
          image: docker:///governmentpaas/terraform
          inputs:
          - name: paas-bootstrap
          - name: vpc-tfstate
          params:
            TF_VAR_env: {{deploy_env}}
            AWS_DEFAULT_REGION: {{aws_region}}
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              terraform apply -target=aws_security_group.office-access-ssh \
                -var-file=paas-bootstrap/terraform/{{aws_account}}.tfvars \
                -target=aws_subnet.infra \
                -state=vpc-tfstate/vpc.tfstate -state-out=vpc.tfstate \
                paas-bootstrap/terraform/vpc
        ensure:
          put: vpc-tfstate
          params:
            file: remove-vagrant-IP-from-ssh-SG/vpc.tfstate

      - task: remove-vagrant-IP-from-BOSH-SG
        config:
          platform: linux
          image: docker:///governmentpaas/terraform
          inputs:
          - name: paas-bootstrap
          - name: vpc-terraform-outputs
          - name: bosh-tfstate
          params:
            TF_VAR_env: {{deploy_env}}
            TF_VAR_system_dns_zone_name: {{system_dns_zone_name}}
            TF_VAR_bosh_fqdn: {{bosh_fqdn}}
            TF_VAR_bosh_fqdn_external: {{bosh_fqdn_external}}
            AWS_DEFAULT_REGION: {{aws_region}}
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              . vpc-terraform-outputs/tfvars.sh
              export TF_VAR_secrets_bosh_postgres_password=""
              export TF_VAR_bosh_az=""
              terraform apply -target=aws_security_group.bosh \
                -state=bosh-tfstate/bosh.tfstate -state-out=bosh.tfstate \
                -var-file=paas-bootstrap/terraform/{{aws_account}}.tfvars paas-bootstrap/terraform/bosh
        ensure:
          put: bosh-tfstate
          params:
            file: remove-vagrant-IP-from-BOSH-SG/bosh.tfstate

      - task: remove-vagrant-IP-from-Concourse-SG
        config:
          platform: linux
          image: docker:///governmentpaas/terraform
          inputs:
          - name: paas-bootstrap
          - name: vpc-terraform-outputs
          - name: bosh-terraform-outputs
          - name: concourse-tfstate
          params:
            TF_VAR_env: {{deploy_env}}
            TF_VAR_concourse_hostname: {{concourse_hostname}}
            TF_VAR_system_dns_zone_name: {{system_dns_zone_name}}
            TF_VAR_git_rsa_id_pub: ""
            AWS_DEFAULT_REGION: {{aws_region}}
          run:
            path: sh
            args:
            - -e
            - -c
            - |
              . vpc-terraform-outputs/tfvars.sh
              . bosh-terraform-outputs/tfvars.sh

              terraform apply -target=aws_security_group.concourse \
                -var-file=paas-bootstrap/terraform/{{aws_account}}.tfvars \
                -state=concourse-tfstate/concourse.tfstate \
                -state-out=concourse.tfstate \
                paas-bootstrap/terraform/concourse
        ensure:
          put: concourse-tfstate
          params:
            file: remove-vagrant-IP-from-Concourse-SG/concourse.tfstate
